#pragma checksum "C:\John\Learning\Github\ChartjsAspnetMVC\Asp.Net-MVC-Chartjs-Sample-App\Views\Home\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "3be5bf0fe241eecd5cfe7e0c703f56821a6abb29"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_Index), @"mvc.1.0.view", @"/Views/Home/Index.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Home/Index.cshtml", typeof(AspNetCore.Views_Home_Index))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "C:\John\Learning\Github\ChartjsAspnetMVC\Asp.Net-MVC-Chartjs-Sample-App\Views\_ViewImports.cshtml"
using WebApplication3;

#line default
#line hidden
#line 2 "C:\John\Learning\Github\ChartjsAspnetMVC\Asp.Net-MVC-Chartjs-Sample-App\Views\_ViewImports.cshtml"
using WebApplication3.Models;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"3be5bf0fe241eecd5cfe7e0c703f56821a6abb29", @"/Views/Home/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"463d1c12e8fc14b2589daa67feec3183fea97611", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #line hidden
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#line 1 "C:\John\Learning\Github\ChartjsAspnetMVC\Asp.Net-MVC-Chartjs-Sample-App\Views\Home\Index.cshtml"
  
    ViewData["Title"] = "Home Page";

#line default
#line hidden
            BeginContext(45, 839, true);
            WriteLiteral(@"<script src=""https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.8.0-rc.1/Chart.bundle.js""></script>
<script src=""https://cdn.jsdelivr.net/npm/chartjs-plugin-zoom@0.7.3""></script>
<script src=""https://cdnjs.cloudflare.com/ajax/libs/chartjs-plugin-annotation/0.5.7/chartjs-plugin-annotation.js""></script>
<script src=""https://code.jquery.com/jquery-3.4.1.js""
        integrity=""sha256-WpOohJOqMqqyKL9FccASB9O0KwACQJpFTUBLTYOVvVU=""
        crossorigin=""anonymous""></script>
<script type=""text/javascript"" src=""https://cdnjs.cloudflare.com/ajax/libs/FileSaver.js/1.3.8/FileSaver.js""></script>
<script type=""text/javascript"" src=""https://cdnjs.cloudflare.com/ajax/libs/javascript-canvas-to-blob/3.15.0/js/canvas-to-blob.js""></script>


<div class=""text-center"">
    <h1 class=""display-4"">Graph with Chart.js</h1>    
</div>
<html>
");
            EndContext();
            BeginContext(884, 346, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("body", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "3be5bf0fe241eecd5cfe7e0c703f56821a6abb294282", async() => {
                BeginContext(890, 333, true);
                WriteLiteral(@"
    <div id=""container"">
        <canvas id=""canvas"" style=""width:50px""></canvas>
    </div>

    <div class=""d-lg-inline"">
        <button id=""download-btn"">Export Chart</button>
        <button id=""updateName-btn"">Update Y axis name</button>

        <button id=""removeGrid-btn"">Remove Grid Lines</button>
    </div>

");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(1230, 7568, true);
            WriteLiteral(@"
</html>

<script>
    var myBar;
    $(document).ready(function () {
        //Load Graph
        loadGraph();
        //Method to download the graph as image
        $('#download-btn').click(function () {
            $('#canvas').get(0).toBlob(function (blob) {
                saveAs(blob, ""chart.png"");
            });
        });

        //Method to update the name of the axis
        $('#updateName-btn').click(function () {

            myBar.options.scales.yAxes[0].scaleLabel.labelString = ""My New Title"";
            myBar.update();
        });

        $('#removeGrid-btn').click(function () {

            myBar.options.scales.yAxes[0].gridLines.display = false;
            myBar.options.scales.yAxes[1].gridLines.display = false;
            myBar.options.scales.yAxes[2].gridLines.display = false;
            myBar.options.scales.xAxes[0].gridLines.display = false;
            myBar.update();
        });


    });




    var randomScalingFactor = function () {
    ");
            WriteLiteral(@"    return (Math.random() > 0.5 ? 1.0 : 1.0) * Math.round(Math.random() * 10000);
    };
    var randomColorFactor = function () {
        return Math.round(Math.random() * 255);
    };
    var randomColor = function () {
        return 'rgba(' + randomColorFactor() + ',' + randomColorFactor() + ',' + randomColorFactor() + ',.7)';
    };

    var barChartData = {
        labels: [""9/18/2018 4:49:28 PM"", ""9/18/2018 5:19:28 PM"", ""9/18/2018 5:49:28 PM"", ""9/18/2018 6:19:28 PM"",
            ""9/18/2018 6:49:28 PM"", ""9/18/2018 7:19:28 PM"", ""9/18/2018 7:49:28 PM"", ""9/18/2018 8:19:28 PM"",
            ""9/18/2018 8:49:28 PM"", ""9/18/2018 9:19:28 PM"", ""9/18/2018 9:49:28 PM"", ""9/18/2018 10:19:28 PM"",
            ""9/18/2018 10:49:28 PM"", ""9/18/2018 11:19:28 PM"", ""9/18/2018 11:49:28 PM"", ""9/19/2018 00:19:28 AM"",
            ""9/19/2018 00:49:28 AM"", ""9/19/2018 1:19:28 AM"", ""9/19/2018 1:49:28 AM"", ""9/19/2018 2:19:28 AM"",
            ""9/19/2018 2:49:28 AM"", ""9/19/2018 3:19:28 AM"", ""9/19/2018 3:49:28 AM"", ""9/19/20");
            WriteLiteral(@"18 4:19:28 AM"",
            ""9/19/2018 4:49:28 AM"", ""9/19/2018 5:19:28 AM"", ""9/19/2018 5:49:28 AM"", ""9/19/2018 6:19:28 AM"",
            ""9/19/2018 6:49:28 AM"", ""9/19/2018 7:19:28 AM"", ""9/19/2018 7:49:28 AM"", ""9/19/2018 8:19:28 AM"",
            ""9/19/2018 8:49:28 AM"", ""9/19/2018 9:19:28 AM"", ""9/19/2018 9:49:28 AM""],
        datasets: [{
            label: 'Frequency',
            yAxisID: ""id1"",
            fill: false,
            borderColor: ""rgba(0,0,0,1)"",
            data: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.005, 0.01815, 0.01643, 0.02253, 0.05503, 0.06, 0.05849, 0.05757, 0.05685, 0.05407, 0.05355, 0.03923, 0.03677, 0.03277, 0.02977, 0.02377, 0.01977, 0, 0, 0, 0, 0, 0, 0,]
        }, {
            label: 'Voltage',
            borderColor: ""rgba(0,0,255,1)"",
            yAxisID: ""id3"",
            fill: false,
            data: [0.993, 0.993, 0.993, 0.993, 0.993, 0.993, 0.993, 0.993, 0.993, 0.993, 0.993, 0.993, 0.993, 0.993, 0.993, 0.993, 0.993, 0.993, 0.993, 0.993, 0.993, 0.993, 0.9");
            WriteLiteral(@"93, 0.993, 0.993, 0.993, 0.993, 0.993, 0.993, 0.993, 0.993, 0.993, 0.993, 0.993, 0.993, 0.993, 0.993,]
        },
        {
            label: 'Temperature',
            borderColor: ""rgba(255,0,0,1)"",
            yAxisID: ""id2"",
            fill: false,
            data: [78.8, 78.8, 78.8, 78.8, 78.8, 78.8, 78.8, 78.8, 78.8, 78.8, 78.8, 78.8, 78.8, 78.8, 78.8, 78.8, 78.8, 78.8, 78.8, 78.8, 78.8, 78.8, 78.8, 78.8, 78.8, 78.8, 78.8, 78.8, 78.8, 78.8, 78.8, 78.8, 78.8, 78.8, 78.8, 78.8, 78.8]
        }
        ]

    };


    var loadGraph = function () {
        var ctx = document.getElementById(""canvas"").getContext(""2d"");

        myBar = new Chart(ctx, {
            type: 'line',
            data: barChartData,
            options: {


                // Elements options apply to all of the options unless overridden in a dataset
                // In this case, we are setting the border of each bar to be 2px wide and green
                elements: {
                    rectangle: {");
            WriteLiteral(@"
                        borderWidth: 0,
                        borderSkipped: 'bottom'
                    }
                },
                responsive: true,
                animation: true,
                legend: {
                    display: true,
                    position: 'bottom',
                },

                plugins: {
                    zoom: {
                        pan: {
                            enabled: true,
                            mode: 'x'
                        },
                        zoom: {
                            enabled: true,
                            mode: 'x',


                        }
                    }
                },

                scales: {
                    yAxes: [
                        {

                            gridLines: {
                                display: true
                            },
                            scaleLabel: {
                                display: true,
   ");
            WriteLiteral(@"                             labelString: 'Frequency',
                            },
                            ticks: {
                                display: false,
                                beginAtZero: true,
                                max: 0.1
                            },
                            id: ""id1""

                        },
                        {
                            gridLines: {
                                display: false
                            },
                            scaleLabel: {
                                display: true,
                                labelString: 'Temperature',
                            },
                            ticks: {
                                max: 120,
                                min: 50,
                                display: true
                            },

                            position: ""right"",
                            id: ""id2""
                        },
  ");
            WriteLiteral(@"                      {

                            ticks: {
                                beginAtZero: true,
                                max: 5
                            },
                            id: ""id3""
                        }
                    ],
                    xAxes: [{
                        gridLines: {
                            display: true

                        },
                        stacked: true,
                        ticks: {
                            display: true,
                            autoSkip: true,
                            autoSkipPadding: 5,
                            maxTicksLimit: 3,
                            maxRotation: 0,
                            labelOffset: 30,
                        }
                    }]
                },
                annotation: {

                    annotations: [{
                        drawTime: 'beforeDatasetsDraw',
                        type: 'box',
                 ");
            WriteLiteral(@"       xScaleID: 'x-axis-0',
                        //scaleID: 'y-axis-1',
                        ////yScaleID: 'y-axis-0',
                        xMin: '9/18/2018 10:49:28 PM',
                        xMax: ""9/19/2018 6:49:28 AM"",
                        backgroundColor: 'rgba(255,199,127,0.5)',

                    }]
                }
            }

        });

    }
</script>");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
